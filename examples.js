/*
Some examples are based on:
- Google's SRE workbook, SLO Document: https://sre.google/workbook/slo-document/
- Google's SRE workbook, Implementing SLOs: https://sre.google/workbook/implementing-slos/
- Collibra, The 6 dimensions of data quality: https://www.collibra.com/us/en/blog/the-6-dimensions-of-data-quality
*/
export default [
    {
        title: 'Availability: Synthetic uptime probe',
        description: 'The percentage of successful synthetic probes that do a HTTP GET request to the root endpoint evrey minute',
        timeSlot: 60,
        good: 'response_code == 200',
        valid: 'all',
    },
    {
        title: 'Availability: Organic traffic uptime',
        description: 'The percentage of successful requests to the endpoint',
        unit: 'requests',
        good: '200 ≤ response_code < 500',
        valid: 'inbound',
    },
    {
        title: 'Availability: Organic purchase flow',
        description: 'The percentage of settled payments out of all orders placed via the website',
        unit: 'orders',
        good: 'payment settled',
        valid: 'placed via website',
    },
    {
        title: 'Availability: Error Rate',
        description: 'The percentage of authenticated requests that were successful',
        unit: 'requests',
        good: 'response_code < 500',
        valid: 'authenticated',
    },
    {
        title: 'Latency: Response Latency',
        description: 'The percentage of sufficiently fast requests, as measured from the load balancer metrics. "Sufficiently fast" is defined as ≤ 400 ms',
        unit: 'requests',
        good: 'response_latency ≤ 400ms',
        valid: 'all load balancer hits',
    },
    {
        title: 'Latency: Database Query',
        description: 'The percentage of sufficiently fast database queries for a specific query type. "Sufficiently fast" is defined as ≤ 100 ms',
        unit: 'insertion queries',
        good: 'query_latency ≤ 100ms',
        valid: 'all to the customers table',
    },
    {
        title: 'Latency: Response 75th Percentile',
        description: 'The percentage of requests where the P75 percentile over 5 minutes was sufficiently fast. "Sufficiently fast" is defined as ≤ 800 ms',
        timeSlot: 300,
        good: 'P75(response_latency, 5m) ≤ 800ms',
        valid: 'all',
    },
    {
        title: 'Throughput: Worker Efficiency',
        description: 'The number of minutes where an expensive wroker processed enough requests to justify the cost of keeping it alive',
        timeSlot: 60,
        good: 'processed',
        valid: 'all',
    },
    {
        title: 'Throughput: Cache hit rate',
        description: 'The number of requests that were responded via the cache storage instead of going to the origin',
        unit: 'request',
        good: 'responded from cache',
        valid: 'all to cache',
    },
    {
        title: 'Freshness: New Articles',
        description: 'The difference between “Published” timestamp in the browser and “Published” timestamp in the CMS is sufficiently small. "Sufficiently small" is defined as ≤ 1m',
        unit: 'articles',
        good: 'cms_timestamp - web_timestamp ≤ 1m',
        valid: 'all FROM breaking news section',
    },
    {
        title: 'Freshness: Page Updates',
        description: 'The difference between “Last Updated” timestamp in the browser and “Last Updated” timestamp in the origin is sufficiently small. "Sufficiently small" is defined as ≤ 5m. A prope is used to scan the front-page',
        unit: 'page checks',
        good: 'origin_last_update - browser_last_update ≤ 5m',
        valid: 'all front-page',
    },
    {
        title: 'Correctness: Main database table',
        description: 'The proportion of records coming into the pipeline that resulted in the correct value coming out.',
        unit: 'records',
        good: 'correct value',
        valid: 'incoming pipeline',
    },
    {
        title: 'Coverage: Customer data',
        description: 'Percentage of customer records that have the minimum information essential for a productive engagement',
        unit: 'pipeline runs',
        good: 'sum(customer_records, containing_required_attributes)',
        valid: 'sum(customer_records)',
    },
    {
        title: 'Completeness: Customer data',
        description: 'Percentage of customer records that have the minimum information essential for a productive engagement',
        unit: 'pipeline runs',
        good: 'sum(customer_records, containing_required_attributes)',
        valid: 'sum(customer_records)',
    },
    {
        title: 'Completeness: Game data',
        description: 'The proportion of hours in which 100% of the games in the data store were processed (no records were skipped). Uses metrics exported by the score pipeline',
        unit: 'pipeline runs',
        good: 'pipeline runs that process 100% of the records',
        valid: 'pipeline runs',
    },
    {
        title: 'Consistency: Replication Lag',
        description: 'The percentage of database write events which are repliacated in a sufficiently quick time. "Sufficiently small" is defined as < 1s',
        unit: 's',
        good: 'replication_lag ≤ 1s',
        valid: 'all database write events',
    },
    {
        title: 'Accuracy: Account Information',
        description: 'Percentage of customer records where the account information matches the information acquired via banking API',
        unit: 'customer records',
        good: 'match_bank_record("name", "phone", "address")',
        valid: 'all',
    },
    {
        title: 'Consistency: Customer data',
        description: 'Percentage of order records from the order intake system that match those of the orderfulfillment system',
        unit: 'order records',
        good: 'sum(match(fulfillment_record, intake_record))',
        valid: 'sum(fulfillment_record)',
    },
    {
        title: 'Consistency: Cache',
        description: 'Percentage cache entries which match the data in the database. In other words, how many records are updated in the cache after they are created/updated/deleted in the database',
        unit: 'cache entries',
        good: 'sum(match(cache_entry, database_record))',
        valid: 'sum(cache_entry)',
    },
    {
        title: 'Validity: Personnel Data',
        description: 'Percentage of active personnel record where the height information is valid',
        unit: 'records',
        good: 'sum(active_personnel_records, 18 <= person.age <= 65)',
        valid: 'sum(active_personnel_records)',
    },
    {
        title: 'Uniqueness: Profile Pictures',
        description: 'For fraud detection or reducing errors, we want to make sure that no two profiles have the same profile picture.',
        unit: 'profile pictures',
        good: 'sum(unique(profile_picture))',
        valid: 'sum(profile_picture)',
    },
    {
        title: 'Incident Handling Speed',
        description: 'The percentage of highly severe incidents that were resolved sufficiently fast. "Sufficiently fast" is defined as < 30m',
        unit: 'incidents',
        good: 'time_to_restore ≤ 30m',
        valid: 'Incident Severity == 1 || 2',
    },
    {
        title: 'Time To Acknolwledge',
        description: 'The percentage of high priority incidents that were acknowledged sufficiently fast. "Sufficiently fast" is defined as < 5m',
        unit: 'incidents',
        good: 'time_to_acknowledge ≤ 5m',
        valid: 'Incident Priority == 1',
    },
    {
        title: 'MTBF (beta)',
        description: 'The mean time between failures is larger than 7 days',
        timeSlot: 60,
        good: 'P50(time_between_failures, 30d) ≥ 7 days',
        valid: 'all',
    },
    {
        title: 'MTTR (beta)',
        description: 'The mean time to restore a service after an incident is less than 30 minutes',
        timeSlot: 60,
        good: 'P50(time_to_resolution, 30d) ≤ 30m',
        valid: 'all',
    },
]
